name: Documentation

on:
  push:
    branches: [ main ]
    paths: 
      - 'docs/**'
      - 'src/**'
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'README.md'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  docs-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          docs/_build
        key: ${{ runner.os }}-docs-${{ hashFiles('pyproject.toml', 'docs/conf.py') }}
        restore-keys: |
          ${{ runner.os }}-docs-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config pandoc graphviz
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install basic dependencies first
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install numpy
        # Install docs dependencies
        pip install sphinx sphinx-design furo myst-parser sphinx-copybutton sphinxcontrib-mermaid sphinx-autodoc-typehints
        # Try to install the package dependencies without the package itself
        pip install monai funlib-geometry "funlib.persistence==0.6.1" gunpowder
        # Try to install the package (but continue even if it fails)
        pip install -e ".[docs]" || echo "Package installation failed, continuing with docs build"
        
    - name: Verify package installation
      run: |
        python -c "
        import sys, os
        sys.path.insert(0, os.path.abspath('src'))
        try:
            import dacapo_monai
            print('‚úÖ dacapo_monai imported successfully')
            print(f'Version: {getattr(dacapo_monai, \"__version__\", \"unknown\")}')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            print('Available modules:')
            import pkgutil
            for importer, modname, ispkg in pkgutil.iter_modules(['src']):
                print(f'  - {modname}')
        "
        
    - name: Check documentation source files
      run: |
        cd docs
        find . -name "*.md" -exec echo "Found: {}" \;
        find . -name "*.rst" -exec echo "Found: {}" \;
        
    - name: Build documentation
      run: |
        cd docs
        export SPHINX_NO_AUTOSUMMARY=1
        # Try building with fallback approach
        sphinx-build -b html . _build/html -v --keep-going -E
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        
    - name: Check for broken links
      run: |
        cd docs
        sphinx-build -b linkcheck . _build/linkcheck -v || true
        
    - name: Generate PDF documentation
      run: |
        cd docs
        sphinx-build -b latex . _build/latex -v || true
        if [ -f "_build/latex/dacapo-monai.tex" ]; then
          cd _build/latex
          make || true
        fi
        
    - name: Upload documentation HTML
      uses: actions/upload-artifact@v4
      with:
        name: docs-html
        path: docs/_build/html/
        retention-days: 30
        
    - name: Upload documentation PDF
      uses: actions/upload-artifact@v4
      if: success() && hashFiles('docs/_build/latex/*.pdf') != ''
      with:
        name: docs-pdf
        path: docs/_build/latex/*.pdf
        retention-days: 30
        
    - name: Check documentation quality
      run: |
        cd docs/_build/html
        echo "üìä Documentation Statistics:"
        find . -name "*.html" | wc -l | xargs echo "HTML pages:"
        du -sh . | xargs echo "Total size:"
        echo "üìÑ Main pages:"
        ls -la *.html || true
        echo "üìÅ Directories:"
        ls -d */ || true

  docs-deploy:
    runs-on: ubuntu-latest
    needs: docs-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: docs-html
        path: docs-html/
        
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs-html/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  docs-preview:
    runs-on: ubuntu-latest
    needs: docs-build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: docs-html
        path: docs-preview/
        
    - name: Upload preview documentation
      uses: actions/upload-artifact@v4
      with:
        name: docs-preview-pr-${{ github.event.number }}
        path: docs-preview/
        retention-days: 7
        
    - name: Comment PR with preview link
      uses: actions/github-script@v6
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          const previewArtifact = artifacts.artifacts.find(
            artifact => artifact.name === `docs-preview-pr-${{ github.event.number }}`
          );
          
          if (previewArtifact) {
            const comment = `## üìö Documentation Preview
            
            The documentation for this PR has been built successfully!
            
            **Download preview**: [docs-preview-pr-${{ github.event.number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **Changes detected in**:
            ${context.payload.pull_request.changed_files} files changed
            
            **Note**: Download the artifact and extract it to view the HTML documentation locally.
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  docs-validate:
    runs-on: ubuntu-latest
    needs: docs-build
    
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: docs-html
        path: docs-html/
        
    - name: Validate HTML
      run: |
        sudo apt-get update
        sudo apt-get install -y tidy
        cd docs-html
        find . -name "*.html" -exec echo "Validating: {}" \; -exec tidy -q {} \; || true
        
    - name: Check for missing images
      run: |
        cd docs-html
        echo "üñºÔ∏è Checking for missing images..."
        grep -r "img src=" . || echo "No images found"
        grep -r "404" . && echo "‚ö†Ô∏è Found 404 references" || echo "‚úÖ No 404 references found"
        
    - name: Check documentation completeness
      run: |
        cd docs-html
        echo "üìã Documentation Completeness Check:"
        
        # Check for required pages
        required_pages=("index.html" "getting_started/index.html" "api_reference/index.html")
        for page in "${required_pages[@]}"; do
          if [ -f "$page" ]; then
            echo "‚úÖ Found: $page"
          else
            echo "‚ùå Missing: $page"
          fi
        done
        
        # Check for empty pages
        find . -name "*.html" -size -1k -exec echo "‚ö†Ô∏è Small page (might be empty): {}" \;
        
        echo "‚úÖ Documentation validation completed"