name: Tests and Documentation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.9"
  
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('dacapo_monai/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Install additional test dependencies
      run: |
        pip install pytest pytest-cov pytest-xdist pytest-mock
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        
    - name: Run linting
      run: |
        python -m flake8 src/dacapo_monai --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 src/dacapo_monai --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Run type checking
      run: |
        python -m mypy src/dacapo_monai --ignore-missing-imports --no-strict-optional
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src/dacapo_monai --cov-report=xml --cov-report=term
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: dacapo_monai/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config
        
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        
    - name: Run integration tests
      run: |
        python demo.py
        
    - name: Test examples
      run: |
        python examples/basic_medical_imaging.py || true  # Allow to fail if dependencies missing
        python examples/ssl_contrastive_learning.py || true
        python examples/migration_example.py || true

  docs:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-docs-${{ hashFiles('dacapo_monai/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-docs-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config pandoc
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip install sphinx sphinx-design furo myst-parser sphinx-copybutton sphinxcontrib-mermaid
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        
    - name: Build documentation
      run: |/docs
        sphinx-build -b html . _build/html -W --keep-going
        
    - name: Check documentation links
      run: |/docs
        sphinx-build -b linkcheck . _build/linkcheck || true
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation-html
        path: dacapo_monai/docs/_build/html/
        retention-days: 30

  deploy-docs:
    runs-on: ubuntu-latest
    needs: docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-html
        path: docs-html/
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs-html/
        publish_branch: gh-pages
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy documentation from ${{ github.sha }}'

  build-package:
    runs-on: ubuntu-latest
    needs: [test, docs]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dacapo_monai/dist/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check
      run: |
        pip install -e .
        safety check --json || true
        
    - name: Run bandit security scan
      run: |
        bandit -r src/dacapo_monai -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: dacapo_monai/*-report.json
        retention-days: 30